import tkinter as tk
import tkinter.messagebox
from PIL import Image, ImageTk
import pygame
import random
import os
import math
import time
import base64
import tempfile


def write_temp_file(data, file_extension):
    temp_file = tempfile.NamedTemporaryFile(suffix=file_extension, delete=False)
    try:
        with open(temp_file.name, 'wb') as f:
            f.write(base64.b64decode(data))
        return temp_file.name
    finally:
        temp_file.close()

image_base64 = """

"""

audio_base64 = """
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
"""

image_path = write_temp_file(image_base64, '.jpg')
audio_path = write_temp_file(audio_base64, '.mp3')



class Ghost:
    def __init__(self, root, image_path, sound_file, pos=None, size=None, movement='straight', speed=1):
        self.root = root
        self.image_path = image_path
        self.sound_file = sound_file
        self.pos = pos if pos else (random.randint(0, root.winfo_screenwidth()), random.randint(0, root.winfo_screenheight()))
        self.size = size if size else (random.randint(50, 200), random.randint(50, 200))
        self.movement = movement
        self.speed = speed
        self.angle = 0
        self.window = None

        self.load_sound()
        self.create_window()
        self.start_movement()
        self.fade_in(0.0)
        self.play_sound()

    def load_sound(self):
        pygame.mixer.init()
        self.sound = pygame.mixer.Sound(self.sound_file)
    
    def play_sound(self):
        self.sound.play()

    def create_window(self):
        self.window = tk.Toplevel(self.root)
        self.window.title("Ghost")
        self.window.overrideredirect(True)  # Remove window decorations

        ghost_image = Image.open(self.image_path)
        ghost_image = ghost_image.resize(self.size)
        self.ghost_photo = ImageTk.PhotoImage(ghost_image)

        label = tk.Label(self.window, image=self.ghost_photo)
        label.image = self.ghost_photo
        label.pack()

        self.position_window()
        

    def position_window(self):
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        x = self.pos[0]
        y = self.pos[1]

        x = min(max(0, x), screen_width - self.window.winfo_width())
        y = min(max(0, y), screen_height - self.window.winfo_height())

        self.window.geometry(f"+{x}+{y}")

    def start_movement(self):
        if self.movement == 'straight':
            self.move_straight()
        elif self.movement == 'stand_still':
            self.move_stand_still()
        elif self.movement == 'curve':
            self.move_curve()

    def move_straight(self):

        direction = random.randint(0, 3)
        if direction == 0: 
            x = self.pos[0] + self.speed*10
            y = self.pos[1]
        elif direction == 1:  
            x = self.pos[0] - self.speed*10
            y = self.pos[1]
        elif direction == 2:
            x = self.pos[0]
            y = self.pos[1] + self.speed*10
        elif direction == 3: 
            x = self.pos[0]
            y = self.pos[1] - self.speed*10

        self.window.geometry(f"+{x}+{y}")
        self.pos = (x, y)

        self.window.after(100, self.move_straight)

    def move_stand_still(self):

        self.window.after(1000, self.move_stand_still)

    def move_curve(self):

        radius = 100
        x = self.pos[0] + int(radius * math.cos(math.radians(self.angle)))
        y = self.pos[1] + int(radius * math.sin(math.radians(self.angle)))

        self.window.geometry(f"+{x}+{y}")

        self.angle += self.speed
        if self.angle >= 360:
            self.angle -= 360

        self.window.after(50, self.move_curve)

    def fade_in(self, alpha):
        if alpha <= 1:
            self.window.attributes("-alpha", alpha)
            self.window.after(100, self.fade_in, alpha + 0.1)
        else:
            self.window.after(2000, self.fade_out, 1.0)


    def fade_out(self, alpha):
        if alpha >= 0:
            self.window.attributes("-alpha", alpha)
            self.window.after(100, self.fade_out, alpha - 0.1)
        else:
            self.window.destroy()

def summon_ghost(root):
    movement_options = ['straight', 'stand_still', 'curve']
    selected_movement = random.choice(movement_options)
    speed = random.randint(1, 5)
    
    Ghost(root, image_path, audio_path, movement=selected_movement, speed=speed)

def ghost_game(root):
    num_ghosts = 0
    game_duration = 60000
    start_time = time.time()

    def summon_ghost_periodically():
        nonlocal num_ghosts
        if time.time() - start_time < game_duration / 1000:
            summon_ghost(root)
            num_ghosts += 1
            root.after(random.randint(500, 2000), summon_ghost_periodically)
        else:
            guess_window = tk.Toplevel(root)
            guess_window.title("Guess the Number of Ghosts")
            
            guess_label = tk.Label(guess_window, text="How many ghosts do you think you saw?")
            guess_label.pack(pady=10)
            
            guess_entry = tk.Entry(guess_window)
            guess_entry.pack(pady=5)
            
            def check_guess():
                user_guess = guess_entry.get()
                try:
                    user_guess = int(user_guess)
                except ValueError:
                    tk.messagebox.showerror("Error", "Please enter a valid number.")
                    return
                
                score = abs(user_guess - num_ghosts)
                tk.messagebox.showinfo("Result", f"Your guess was {user_guess}. You were {score} off from the actual number of ghosts: {num_ghosts}.")
                guess_window.destroy()
            
            submit_button = tk.Button(guess_window, text="Submit", command=check_guess)
            submit_button.pack(pady=5)
            
            guess_window.focus_set()  
            guess_window.grab_set()   

    summon_ghost_periodically()


def main():
    root = tk.Tk()
    root.title("Ghost Summoner")

    summon_button = tk.Button(root, text="Summon Ghost", command=lambda: summon_ghost(root))
    summon_button.pack(pady=20)

    ghost_game_button = tk.Button(root, text="Ghost Game", command=lambda: ghost_game(root))
    ghost_game_button.pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    main()
